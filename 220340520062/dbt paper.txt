Create table DEPT(
DEPTNO int(2),
DNAME varchar(15),
LOC varchar(10)
);
Insert into DEPT VALUES
(10,'ACCOUNTING','NEW YORK'),
(20,'RESEARCH','DALLAS'),
(30,'SALES','CHICAGO'),
(40,'OPERATIONS','BOSTON');

Create table EMP(
EMPNO int(4),
ENAME varchar(10),
JOB varchar(9),
HIREDATE date,
SAL float(7,2),
COMM float(7,2),
DEPTNO int(2)
);
Insert into EMP VALUES
(7839,'KING','MANAGER','1991-11-17',5000,NULL,10),
(7698,'BLAKE','CLERK','1981-05-01',2850,NULL,30),
(7782,'CLARK','MANAGER','1981-06-09',2450,NULL,10),
(7566,'JONES','CLERK','1981-04-02',2975,NULL,20),
(7654,'MARTIN','SALESMAN','1981-09-28',1250,1400,30),
(7499,'ALLEN','SALESMAN','1981-02-20',1600,300,30);


SELECT * FROM DEPT;
-- Display all the employees where SAL between 2500 and 5000 (inclusive of both).
SELECT * FROM EMP WHERE SAL BETWEEN 2500 AND 5000;

-- Display all the ENAMEs in descending order of ENAME.
SELECT ENAME FROM EMP
ORDER BY ENAME DESC; 
-- Display all the JOBs in lowercase.
SELECT LOWER(JOB) FROM EMP;
-- Display the ENAMEs and the lengths of the ENAMEs.
SELECT ENAME,LENGTH(ENAME) FROM EMP;
-- Display the DEPTNO and the count of employees who belong to that DEPTNO
SELECT DEPT.DEPTNO,COUNT(EMP.DEPTNO) FROM DEPT JOIN EMP 
ON EMP.DEPTNO=DEPT.DEPTNO
GROUP BY DEPT.DEPTNO;
-- Display the DNAMEs and the ENAMEs who belong to that DNAME.
SELECT DNAME,ENAME FROM DEPT JOIN EMP 
ON EMP.DEPTNO=DEPT.DEPTNO
GROUP BY DNAME;
-- 9. Display the position at which the string ‘AR’ occurs in the ename.
SELECT INSTR(ENAME,'AR') AS POSITION FROM EMP;
-- Display the HRA for each employee given that HRA is 20% of SAL.
SELECT SAL,SAL*0.20 AS HRA FROM EMP;

/*
Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 =
‘CDAC, then string1 exists inside string2. The stored procedure should insert the
appropriate message into a suitable TEMPP output table. Calling program for the
stored procedure need not be written.*/

CREATE TABLE TEMP(
s1 varchar(20),
s2 varchar(20),
s3 varchar(20)

);


DELIMITER //
CREATE PROCEDURE PROC1(s1 varchar (255),s2 varchar (255))

BEGIN
DECLARE a INT(4);
    SET a = locate(s1,s2);
      IF (a!=0)
      THEN 
      INSERT INTO TEMP VALUES(s1,s2,'present');
      ELSE 
          INSERT INTO TEMP VALUES(s1,s2,'absent');
      END IF;
END; //
DELIMITER ;
drop procedure PROC1;
call PROC1('pankaj','pankajwankhede');
call PROC1('subhash','pankajwankhede');
select * from temp;

/* Create a stored function by the name of FUNC1 to take three parameters, the
sides of a triangle. The function should return a Boolean value:- TRUE if the
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is
less than the sum of the lengths of the other two sides. Check if the dimensions
entered can form a valid triangle. Calling program for the stored function need not
be written. */

delimiter //
create function FUNC1(a int,b  int,c int)
returns boolean
deterministic
begin
declare x int;
declare y int;
declare z int;
SET x=a;
SET y=b;
SET z=c;
if (a<b+c)and (c<b+a) and (b<a+c) then 
     return true;
else 
     return false;
end if;
end; //
delimiter ;
drop function func1;
select FUNC1(7,10,5);
select FUNC1(90,7,7);

/*elseif (b<a+c) then 
     return true;
elseif (c<b+a) then 
     return true;*/